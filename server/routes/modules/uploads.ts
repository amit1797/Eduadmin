import { Router } from "express";
import { z } from "zod";
import { authenticateToken, requireRole, type AuthRequest } from "../../middleware/auth";
import { createPresignedPutUrl } from "../../storage/fileStorage";
import multer from "multer";
import path from "path";
import fs from "fs/promises";

export const uploadRouter = Router();
const upload = multer({ storage: multer.memoryStorage() });

const presignSchema = z.object({
  key: z.string().min(1),
  contentType: z.string().min(1),
  expiresInSeconds: z.number().optional()
});

// Issue presigned PUT URL. Accessible to super_admin for onboarding; can be broadened later per role/module.
uploadRouter.post("/presign", authenticateToken, requireRole(["super_admin", "school_admin"]), async (req: AuthRequest, res) => {
  try {
    const { key, contentType, expiresInSeconds } = presignSchema.parse(req.body || {});

    const result = await createPresignedPutUrl({ key, contentType, expiresInSeconds });
    res.json(result);
  } catch (err) {
    if (err instanceof z.ZodError) {
      return res.status(400).json({ message: "Invalid input", errors: err.errors });
    }
    console.error("Presign error:", err);
    res.status(500).json({ message: "Failed to generate upload URL" });
  }
});

export default uploadRouter;

// Local upload endpoint for development: saves to ./uploads and returns a public URL.
// Accepts multipart/form-data with field name 'file' and JSON/body fields: key(optional), folder(optional).
// If key provided, it will be used as relative path under uploads; otherwise folder + autogenerated name.
uploadRouter.post(
  "/local",
  authenticateToken,
  requireRole(["super_admin", "school_admin"]),
  upload.single("file"),
  async (req: AuthRequest, res) => {
    try {
      const file = (req as any).file as Express.Multer.File | undefined;
      if (!file) return res.status(400).json({ message: "file is required" });
      const body = req.body || {};
      const providedKey = typeof body.key === "string" ? body.key : undefined;
      const folder = typeof body.folder === "string" ? body.folder : undefined;

      const uploadsRoot = path.join(process.cwd(), "uploads");
      const safeKey = providedKey?.replace(/^\/+/, "") ||
        path.join(folder || "misc", `${Date.now()}-${file.originalname}`);

      const absFilePath = path.join(uploadsRoot, safeKey);
      await fs.mkdir(path.dirname(absFilePath), { recursive: true });
      await fs.writeFile(absFilePath, file.buffer);

      const publicUrl = `/uploads/${safeKey.replace(/\\/g, "/")}`;
      res.json({ key: safeKey, publicUrl });
    } catch (err) {
      console.error("Local upload error:", err);
      res.status(500).json({ message: "Failed to store file locally" });
    }
  }
);
